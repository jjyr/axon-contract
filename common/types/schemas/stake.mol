import basic;

table StakeInfoDelta {
    is_increase:        byte, // increase or decrease stake, 1 is increase, 0 is decrease
    amount:             Uint128,
    inauguration_epoch: Uint64,
}

table StakeArgs {
    stake_smt_type_id: Byte32,
    staker_identity:   IdentityOpt,
}

// The data[0..16] is a le_u128 means xUDT amount.
// So the cell data is decode from offset 16.
table StakeAtCellData {
    version:            byte,
    l1_address:         Identity,
    l2_address:         Identity,
    stake_info:         StakeInfoDelta, 
    checkpoint_type_id: Byte32,
    xudt_type_id:       Byte32,   // looks like redundent, cause the type script is able to distinguish chains
}

table StakeSMTCellData {
    smt_root:             Byte32, // smt root of all staker infos
    version:              byte,
    checkpoint_type_id:   Byte32,
    delegate_smt_type_id: Byte32,
    xudt_type_id:         Byte32,
}

// stake smt cell witness
table StakeInfo {
    addr:            Identity,
    amount:          Uint128,
}

vector StakeInfos <StakeInfo>;

table StakeSmtUpdateInfo {
    all_stake_infos: StakeInfos, // all stake info
    old_epoch_proof: Bytes,
    new_epoch_proof: Bytes,
}

// election withness
table DelegatorInfo {
    addr: Identity,
    amount: Uint128,
}

vector DelegatorInfos <DelegatorInfo>;

table MinerGroupInfo {
    staker: Identity,
    amount: Uint128,
    delegator_infos: DelegatorInfos, // calculate delegator_smt_root based on this
    delegator_epoch_proof: Bytes, // prove delegator_smt_root's existence
}

vector MinerGroupInfos <MinerGroupInfo>;

table ElectionSmtProof {
    miners: MinerGroupInfos, // calculate staker_smt_root based on this
    staker_epoch_proof: Bytes, // prove staker_smt_root's existence
}

table StakeSmtElectionInfo {
    n1: ElectionSmtProof,
    n2: ElectionSmtProof,
}